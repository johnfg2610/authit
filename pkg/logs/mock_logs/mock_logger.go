// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/johnfg10/authit/pkg/logs (interfaces: ObjectPrinter)

// Package mock_logs is a generated GoMock package.
package mock_logs

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockObjectPrinter is a mock of ObjectPrinter interface
type MockObjectPrinter struct {
	ctrl     *gomock.Controller
	recorder *MockObjectPrinterMockRecorder
}

// MockObjectPrinterMockRecorder is the mock recorder for MockObjectPrinter
type MockObjectPrinterMockRecorder struct {
	mock *MockObjectPrinter
}

// NewMockObjectPrinter creates a new mock instance
func NewMockObjectPrinter(ctrl *gomock.Controller) *MockObjectPrinter {
	mock := &MockObjectPrinter{ctrl: ctrl}
	mock.recorder = &MockObjectPrinterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockObjectPrinter) EXPECT() *MockObjectPrinterMockRecorder {
	return m.recorder
}

// Build mocks base method
func (m *MockObjectPrinter) Build() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build")
	ret0, _ := ret[0].(string)
	return ret0
}

// Build indicates an expected call of Build
func (mr *MockObjectPrinterMockRecorder) Build() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockObjectPrinter)(nil).Build))
}

// PrintField mocks base method
func (m *MockObjectPrinter) PrintField(arg0 string, arg1 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PrintField", arg0, arg1)
}

// PrintField indicates an expected call of PrintField
func (mr *MockObjectPrinterMockRecorder) PrintField(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintField", reflect.TypeOf((*MockObjectPrinter)(nil).PrintField), arg0, arg1)
}
